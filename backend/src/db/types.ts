/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface ActivityLog {
  campaignSessionId: string;
  /**
   * Adds the turn number to the display of the log.
   */
  combatTurn: number | null;
  createdDate: Generated<Timestamp>;
  id: Generated<string>;
  log: string;
  logHeader: string | null;
}

export interface Campaign {
  active: Generated<boolean>;
  createdDate: Generated<Timestamp>;
  creatorUserAccountId: string;
  description: string | null;
  /**
   * A URL path to the icon.
   */
  icon: string | null;
  id: Generated<string>;
  name: string;
  /**
   * Holds important details and plot points about the Campaign's overarching story. This field is only viewable by the owner/admins.
   */
  story: string | null;
}

export interface CampaignAdmin {
  campaignId: string;
  id: Generated<string>;
  userAccountId: string;
}

export interface CampaignSession {
  active: Generated<boolean>;
  campaignId: string;
  createdDate: Generated<Timestamp>;
  id: Generated<string>;
  startDate: Timestamp | null;
  /**
   * This field is only viewable by the owner/admins of the Campaign, not those participating in the session.
   */
  story: string | null;
}

export interface Character {
  alive: Generated<boolean>;
  armorClass: number | null;
  /**
   * Key points to the template attributes while the value is the value of that attribute.
   */
  attributes: string | null;
  campaignId: string;
  class: string | null;
  createdDate: Generated<Timestamp>;
  description: string | null;
  id: Generated<string>;
  /**
   * A URL path to the image.
   */
  image: string | null;
  level: Generated<number>;
  name: string;
  /**
   * Stores derived stats like speed, armor class, etc.
   */
  properties: string | null;
  race: string | null;
  /**
   * Key points to the template resource pool while the value is the value of that pool.
   */
  resourcePools: string | null;
  speed: number | null;
  templateId: string;
}

export interface CharacterFeat {
  characterId: string;
  description: string | null;
  id: Generated<string>;
}

export interface CharacterSkill {
  characterId: string;
  createdDate: Generated<Timestamp>;
  description: string | null;
  id: Generated<string>;
  name: string;
  /**
   * Dice notation.
   */
  roll: string | null;
}

export interface CharacterSpell {
  characterId: string;
  /**
   * Keep track of what this spell consumes on use. Eg. "uses 50 mana".
   */
  cost: string | null;
  createdDate: Generated<Timestamp>;
  description: string | null;
  id: Generated<string>;
  name: string;
  /**
   * Miscellaneous properties like range, brightness, weight, speed, etc.
   */
  properties: string | null;
  /**
   * Dice notation.
   */
  roll: string | null;
}

export interface CharacterTemplate {
  /**
   * Stores the available/allowed attributes and their information (user-customizable).
   */
  attributes: Generated<Json>;
  campaignId: string;
  createdDate: Generated<Timestamp>;
  id: Generated<string>;
  /**
   * Stores things like speed, armor class, initiative, etc.
   */
  properties: Json;
  /**
   * Stores the available/allowed resource pools and their information (user-customizable). Eg. health, mana, stamina, etc.
   */
  resourcePools: Generated<Json>;
}

export interface CombatSession {
  active: Generated<boolean>;
  campaignSessionId: string;
  id: Generated<string>;
  /**
   * The key stores the character name (player and enemy) and the value is the initiative of that character.
   */
  initiative: string | null;
  startDate: Generated<Timestamp>;
}

export interface Enemy {
  /**
   * The rough gauge of an enemy's difficulty and power.
   */
  challengeRating: number | null;
  characterId: string;
  id: Generated<string>;
}

export interface Item {
  campaignId: string;
  characterId: string;
  createdDate: Generated<Timestamp>;
  description: string | null;
  id: Generated<string>;
  /**
   * A URL path to the image.
   */
  image: string | null;
  name: string;
  /**
   * Dice notation.
   */
  roll: string | null;
}

export interface ItemSkill {
  createdDate: Generated<Timestamp>;
  description: string | null;
  id: Generated<string>;
  itemId: string;
  name: string;
  /**
   * Dice notation.
   */
  roll: string | null;
}

export interface Npc {
  characterId: string;
  id: Generated<string>;
}

export interface Pgmigration {
  id: Generated<number>;
  name: string;
  runOn: Timestamp;
}

export interface Player {
  characterId: string;
  id: Generated<string>;
}

export interface UserAccount {
  admin: Generated<boolean>;
  createdDate: Generated<Timestamp>;
  deleted: Generated<boolean>;
  id: Generated<string>;
  password: string;
  /**
   * A URL path to the picture.
   */
  profilePicture: string | null;
  username: string;
}

export interface UserInvite {
  createdDate: Generated<Timestamp>;
  id: Generated<string>;
  usedByUserAccountId: string | null;
  usedDate: Timestamp | null;
}

export interface DB {
  activityLog: ActivityLog;
  campaign: Campaign;
  campaignAdmin: CampaignAdmin;
  campaignSession: CampaignSession;
  character: Character;
  characterFeat: CharacterFeat;
  characterSkill: CharacterSkill;
  characterSpell: CharacterSpell;
  characterTemplate: CharacterTemplate;
  combatSession: CombatSession;
  enemy: Enemy;
  item: Item;
  itemSkill: ItemSkill;
  npc: Npc;
  pgmigrations: Pgmigration;
  player: Player;
  userAccount: UserAccount;
  userInvite: UserInvite;
}
